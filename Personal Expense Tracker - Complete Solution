// src/config/database.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const db = new sqlite3.Database(path.join(__dirname, '../../expense_tracker.db'));

db.serialize(() => {
    // Create transactions table
    db.run(`CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT CHECK(type IN ('income', 'expense')),
        category_id INTEGER,
        amount REAL CHECK(amount > 0),
        date TEXT,
        description TEXT,
        FOREIGN KEY(category_id) REFERENCES categories(id)
    )`);

    // Create categories table
    db.run(`CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE,
        type TEXT CHECK(type IN ('income', 'expense'))
    )`);

    // Insert default categories
    const defaultCategories = [
        ['Salary', 'income'],
        ['Freelance', 'income'],
        ['Food', 'expense'],
        ['Transportation', 'expense'],
        ['Utilities', 'expense'],
        ['Entertainment', 'expense']
    ];

    const insertCategory = db.prepare('INSERT OR IGNORE INTO categories (name, type) VALUES (?, ?)');
    defaultCategories.forEach(category => insertCategory.run(category));
    insertCategory.finalize();
});

module.exports = db;

// src/middleware/validator.js
const { body, param, query, validationResult } = require('express-validator');

const validateTransaction = [
    body('type').isIn(['income', 'expense']).withMessage('Type must be either income or expense'),
    body('category_id').isInt().withMessage('Category ID must be an integer'),
    body('amount').isFloat({ min: 0.01 }).withMessage('Amount must be greater than 0'),
    body('date').isISO8601().withMessage('Invalid date format'),
    body('description').isString().trim().isLength({ min: 1 }).withMessage('Description is required'),
    (req, res, next) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        next();
    }
];

const validateDateRange = [
    query('startDate').optional().isISO8601().withMessage('Invalid start date format'),
    query('endDate').optional().isISO8601().withMessage('Invalid end date format'),
    (req, res, next) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }
        next();
    }
];

module.exports = {
    validateTransaction,
    validateDateRange
};

// src/routes/transactions.js
const express = require('express');
const router = express.Router();
const db = require('../config/database');
const { validateTransaction, validateDateRange } = require('../middleware/validator');

// Create transaction
router.post('/', validateTransaction, (req, res) => {
    const { type, category_id, amount, date, description } = req.body;
    
    const query = `INSERT INTO transactions (type, category_id, amount, date, description)
                   VALUES (?, ?, ?, ?, ?)`;
    
    db.run(query, [type, category_id, amount, date, description], function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.status(201).json({
            message: 'Transaction created successfully',
            id: this.lastID
        });
    });
});

// Get all transactions
router.get('/', validateDateRange, (req, res) => {
    const { startDate, endDate, category_id } = req.query;
    let query = `
        SELECT t.*, c.name as category_name 
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE 1=1
    `;
    const params = [];

    if (startDate && endDate) {
        query += ` AND date BETWEEN ? AND ?`;
        params.push(startDate, endDate);
    }

    if (category_id) {
        query += ` AND category_id = ?`;
        params.push(category_id);
    }

    db.all(query, params, (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json(rows);
    });
});

// Get transaction by ID
router.get('/:id', (req, res) => {
    const query = `
        SELECT t.*, c.name as category_name 
        FROM transactions t
        JOIN categories c ON t.category_id = c.id
        WHERE t.id = ?
    `;
    
    db.get(query, [req.params.id], (err, row) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (!row) {
            return res.status(404).json({ error: 'Transaction not found' });
        }
        res.json(row);
    });
});

// Update transaction
router.put('/:id', validateTransaction, (req, res) => {
    const { type, category_id, amount, date, description } = req.body;
    
    const query = `
        UPDATE transactions 
        SET type = ?, category_id = ?, amount = ?, date = ?, description = ?
        WHERE id = ?
    `;
    
    db.run(query, [type, category_id, amount, date, description, req.params.id], function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (this.changes === 0) {
            return res.status(404).json({ error: 'Transaction not found' });
        }
        res.json({ message: 'Transaction updated successfully' });
    });
});

// Delete transaction
router.delete('/:id', (req, res) => {
    const query = 'DELETE FROM transactions WHERE id = ?';
    
    db.run(query, [req.params.id], function(err) {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        if (this.changes === 0) {
            return res.status(404).json({ error: 'Transaction not found' });
        }
        res.json({ message: 'Transaction deleted successfully' });
    });
});

module.exports = router;

// src/routes/summary.js
const express = require('express');
const router = express.Router();
const db = require('../config/database');
const { validateDateRange } = require('../middleware/validator');

router.get('/', validateDateRange, (req, res) => {
    const { startDate, endDate, category_id } = req.query;
    let whereClause = '1=1';
    const params = [];

    if (startDate && endDate) {
        whereClause += ` AND date BETWEEN ? AND ?`;
        params.push(startDate, endDate);
    }

    if (category_id) {
        whereClause += ` AND category_id = ?`;
        params.push(category_id);
    }

    const query = `
        SELECT 
            SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as total_income,
            SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) as total_expenses,
            (SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) - 
             SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END)) as balance,
            COUNT(CASE WHEN type = 'income' THEN 1 END) as income_count,
            COUNT(CASE WHEN type = 'expense' THEN 1 END) as expense_count
        FROM transactions
        WHERE ${whereClause}
    `;

    db.get(query, params, (err, summary) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        // Get category breakdown
        const categoryQuery = `
            SELECT 
                c.name as category_name,
                c.type as category_type,
                SUM(t.amount) as total_amount,
                COUNT(*) as transaction_count
            FROM transactions t
            JOIN categories c ON t.category_id = c.id
            WHERE ${whereClause}
            GROUP BY c.id
            ORDER BY total_amount DESC
        `;

        db.all(categoryQuery, params, (err, categories) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }

            res.json({
                summary: {
                    total_income: summary.total_income || 0,
                    total_expenses: summary.total_expenses || 0,
                    balance: summary.balance || 0,
                    income_count: summary.income_count || 0,
                    expense_count: summary.expense_count || 0
                },
                categories
            });
        });
    });
});

module.exports = router;

// src/app.js
const express = require('express');
const morgan = require('morgan');
const helmet = require('helmet');
const cors = require('cors');

const transactionsRouter = require('./routes/transactions');
const summaryRouter = require('./routes/summary');

const app = express();

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('dev'));
app.use(express.json());

// Routes
app.use('/transactions', transactionsRouter);
app.use('/summary', summaryRouter);

// Error handling
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        error: 'Something broke!',
        message: err.message
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
